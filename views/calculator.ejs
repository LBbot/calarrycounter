<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Calarry Counter - Calculator</title>
    <link type="text/css" href="/style.css" rel="stylesheet">
</head>
<body>
    <!-- Import header.ejs (the dash after % means it won't escape any HTML characters) -->
    <%- include("header") %>

    <div class = "content">
        <% if (typeof errorList !== "undefined") { %>
            <ul class = "errorWarnings">
                <h3>Error(s) submitting form:</h3>
                <% for (let i = 0; i < errorList.length; i += 1) { %>
                    <li>- <%= errorList[i] %></li>
                <% } %>
            </ul>
        <% } %>

        <!-- tablecontainer CSS allows the table to have it's own horizontal scroll on smaller screens. -->
        <div class="tablecontainer ">
            <h2>Totals</h2>
            <table class = "desktoptable">
                <tablehead>
                    <th>Calories</th>
                    <th>Fat</th>
                    <th>Sat. fats</th>
                    <th>Carbs</th>
                    <th>Sugars</th>
                    <th>Fibre</th>
                    <th>Protein</th>
                    <th>Salt</th>
                </tablehead>
                <tr>
                    <% function getTotals(macroNutrientIndex) {
                        /*
                        Loop through every food on the list and add the value of the nutrient type given in the parameter
                        (as an index) to total. E.G. [3] passed in as a macroNutrientIndex argument to get "calories".
                        We also multiply by 100 to avoid floating point errors, then divide by 100 at the end with toFixed
                        for rounding.
                        */
                        total = 0;

                        for (let foodCalcNum = 0; foodCalcNum < calculatorFoodList.rows.length; foodCalcNum += 1) {
                            total += 100 * Number(calculatorFoodList.rows[foodCalcNum]["value"][macroNutrientIndex]);
                        }

                        // If total still = 0, this will return 0.
                        return total.toFixed(0) / 100;
                    } %>
                    <td><%= getTotals(3) %></td>
                    <td><%= getTotals(4) %></td>
                    <td><%= getTotals(5) %></td>
                    <td><%= getTotals(6) %></td>
                    <td><%= getTotals(7) %></td>
                    <td><%= getTotals(8) %></td>
                    <td><%= getTotals(9) %></td>
                    <td><%= getTotals(10) %></td>
                </tr>
            </table>

            <!-- This one is only visible when media query kicks in for smaller displays -->
            <table class = "mobiletable">
                <tr><th>Calories</th><td><%= getTotals(3) %></td></tr>
                <tr><th>Fat</th><td><%= getTotals(4) %></td></tr>
                <tr><th>Sat. fats</th><td><%= getTotals(5) %></td></tr>
                <tr><th>Carbs</th><td><%= getTotals(6) %></td></tr>
                <tr><th>Sugars</th><td><%= getTotals(7) %></td></tr>
                <tr><th>Fibre</th><td><%= getTotals(8) %></td></tr>
                <tr><th>Protein</th><td><%= getTotals(9) %></td></tr>
                <tr><th>Salt</th><td><%= getTotals(10) %></td></tr>
            </table>
        </div>

        <!-- If there's no calories at all, there's no items in the food list so we show an empty message -->
        <% if (getTotals(3) === 0) {%>
            <h3>Looks like there's nothing here. Why not try adding some food?</h3> <br />
        <% } %>

        <form action="/calculator" method = "post">
            <select name="foodID" class = "foodSelect">
                <!-- Loop through main food list to get names for selection -->
                <% for (let foodNum = 0; foodNum < mainFoodList.rows.length; foodNum+=1) { %>
                    <option value = "<%= mainFoodList.rows[foodNum]["id"] %>"><%= mainFoodList.rows[foodNum]["value"][0] %></option>
                <% } %>
            </select>

            <select name="type" class = "typeSelect">
                <!-- Clientside JS fills out the grams/ml vs average serving option -->
            </select>

            <input type="text" id="amount" class=formamountbox name="amount" size=7 placeholder="Amount">

            <input type="submit" class="js-submit" value="Add food">
        </form>


        <div class="tablecontainer">
            <table>
                <tablehead>
                    <th>Name</th>
                    <th>Amount</th>
                    <th>Calories</th>
                    <th>Fat</th>
                    <th>Sat. fats</th>
                    <th>Carbs</th>
                    <th>Sugars</th>
                    <th>Fibre</th>
                    <th>Protein</th>
                    <th>Salt</th>
                </tablehead>
                <!-- Loop through the different foods in the calculator list -->
                <% for (let foodCalcNum = 0; foodCalcNum < calculatorFoodList.rows.length; foodCalcNum += 1) { %>
                    <tr>
                        <!-- Harcoded first 3 indexes so we can use logic on amount type (e.g. grams) -->
                        <td>
                            <%= calculatorFoodList.rows[foodCalcNum]["value"][0] %>
                        </td>
                        <td class="editAmountBox">
                            <form action="/calculator/<%= calculatorFoodList.rows[foodCalcNum]["id"] %>" method = "post" class="edit-amount-form">
                                <input
                                    type="text"
                                    class="editamountbox"
                                    name="editamount"
                                    size=7
                                    data-id="<%= calculatorFoodList.rows[foodCalcNum]["id"] %>"
                                    value="<%= calculatorFoodList.rows[foodCalcNum]["value"][1] %>"
                                >
                                <% if (calculatorFoodList.rows[foodCalcNum]["value"][2] === "grams") {%>
                                    <br>grams
                                <% } else if (calculatorFoodList.rows[foodCalcNum]["value"][2] === "averageServing") { %>
                                    <br>serving(s)
                                <% } %>
                            </form>
                        </td>
                        <!-- Loop through array of info (the value of the object) to fill rest of table-->
                        <% for (let nutritionNum = 3; nutritionNum < calculatorFoodList.rows[foodCalcNum]["value"].length; nutritionNum +=1 ) { %>
                            <td>
                                <%=calculatorFoodList.rows[foodCalcNum]["value"][nutritionNum]%>
                            </td>
                        <% } %>
                        <!-- Remove button is given the food item's ID as param in URL for Express to retrieve -->
                        <td>
                            <form action="/remove-from-calculator/<%=calculatorFoodList.rows[foodCalcNum]["id"]%>" method = "post"><button class="deletebutton">Remove</button></form>
                        </td>
                    </tr>
                <% } %>
            </table>
        </div>

        <!-- Pie chart here (checks if any carbs, protein or fat total more than 0 so it can make chart)-->
        <% if (getTotals(4) + getTotals(6) + getTotals(9) > 0) { %>
            <h2>Macronutrient split</h3>
            <br>
            <canvas class = "myCanvas"></canvas>

            <!-- Key -->
            <ul>
                <li><span class="shape-circle shape-blue"></span> Carbohydrates</li>
                <li><span class="shape-circle shape-lgray"></span> Fat</li>
                <li><span class="shape-circle shape-dgray"></span> Protein</li>
            </ul>
        <% } %>

        <%- include("footer") %>
    </div>

    <script>
        "use strict";
        /*
        This passes the mainFoodList from serverside to clientside JS so that when selecting a food,
        it can check for if there's an average serving option. (Must be inline to do this.)
        */
        const mainFoodListForClientSide = <%- JSON.stringify(mainFoodList) %>;

        // Query select the two drop down boxes
        const foodSelection = document.querySelector(".foodSelect");
        const amountTypeSelection = document.querySelector(".typeSelect");

        function getAvgServ() {
            if (mainFoodListForClientSide.rows[foodSelection.selectedIndex]["value"][9] !== "") {
                amountTypeSelection.innerHTML = "<option value = 'grams'>grams/ml</option><option value = 'averageServing'>average serving (" + mainFoodListForClientSide.rows[foodSelection.selectedIndex]["value"][9] + ")</option>";
            } else {
                amountTypeSelection.innerHTML = "<option value = 'grams'>grams/ml</option>";
            }
        }
        // run on pageload, then run whenever selection is changed
        getAvgServ();
        foodSelection.addEventListener("change", getAvgServ);


        /*
        Grab id and edited amount to send to the correct route for Express
        */
        function editAmountRedirect(evt) {
            evt.target.parentNode.submit()
        }
        // Put onchange event listeners on the input boxes in the calculator list
        const amountEditBoxes = document.querySelectorAll(".editamountbox");
        amountEditBoxes.forEach(function (box) {
            box.addEventListener("change", editAmountRedirect)
        });


        /*
        Pie chart code
        */
        const myCanvas = document.querySelector(".myCanvas");
        myCanvas.width = 300;
        myCanvas.height = 300;

        const ctx = myCanvas.getContext("2d");

        function drawPieSlice(ctx, centerX, centerY, radius, startAngle, endAngle, color) {
            ctx.fillStyle = color;
            ctx.beginPath();
            ctx.moveTo(centerX, centerY);
            ctx.arc(centerX, centerY, radius, startAngle, endAngle);
            ctx.closePath();
            ctx.fill();
        }

        const Piechart = function(options) {
            this.options = options;
            this.canvas = options.canvas;
            this.ctx = this.canvas.getContext("2d");
            this.colors = options.colors;

            this.draw = function() {
            let total_value = 0;
            let color_index = 0;
            for (let categ in this.options.data) {
                const val = this.options.data[categ];
                total_value += val;
            }

            let start_angle = 0;
            for (let categ in this.options.data) {
                const val = this.options.data[categ];
                const slice_angle = 2 * Math.PI * val / total_value;

                drawPieSlice(
                    this.ctx,
                    this.canvas.width/2,
                    this.canvas.height/2,
                    Math.min(this.canvas.width/2, this.canvas.height/2),
                    start_angle,
                    start_angle+slice_angle,
                    this.colors[color_index%this.colors.length]
                );

                start_angle += slice_angle;
                color_index++;
                }

                start_angle = 0;
                for (let categ in this.options.data) {
                    const val = this.options.data[categ];
                    const slice_angle = 2 * Math.PI * val / total_value;
                    const pieRadius = Math.min(this.canvas.width/2, this.canvas.height/2);
                    const labelX = this.canvas.width/2 + (pieRadius / 2) * Math.cos(start_angle + slice_angle/2);
                    const labelY = this.canvas.height/2 + (pieRadius / 2) * Math.sin(start_angle + slice_angle/2);

                    const labelText = Math.round(100 * val / total_value);
                    this.ctx.fillStyle = "black";
                    this.ctx.font = "20px sans-serif";
                    this.ctx.fillText(labelText + "%", labelX, labelY);
                    start_angle += slice_angle;
                }
            }
        }

        const myPiechart = new Piechart(
            {
                canvas: myCanvas,
                data:{
                    "fat": <%= getTotals(4) %>,
                    "carbs": <%= getTotals(6) %>,
                    "protein": <%= getTotals(9) %>
                },
                colors:["#bfd4df","#0375B4", "#62757f"]
            }
        );

        myPiechart.draw();
    </script>

</body>
</html>
